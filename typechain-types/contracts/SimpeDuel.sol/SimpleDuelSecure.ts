/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SimpleDuelSecureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE_PERCENT"
      | "RESOLUTION_TIMELOCK"
      | "authorizeResolver"
      | "authorizedResolvers"
      | "bettingToken"
      | "bettingTokenDecimals"
      | "calculatePotentialGains"
      | "claimGains"
      | "claimRefund"
      | "createDuel"
      | "duels"
      | "emergencyWithdraw"
      | "executeResolution"
      | "fanToken"
      | "fanTokenBalanceSnapshot"
      | "fanTokenDecimals"
      | "fanTokenThreshold"
      | "getBettingToken"
      | "getDuelInfo"
      | "getFanToken"
      | "getOutcomePot"
      | "getPlatformFeePercent"
      | "getUserBets"
      | "isDuelBalanced"
      | "nextDuelId"
      | "owner"
      | "pause"
      | "paused"
      | "pendingResolutions"
      | "placeBet"
      | "platformFeePercent"
      | "pointsPerBetUnit"
      | "proposeResolution"
      | "renounceOwnership"
      | "setFanTokenThreshold"
      | "setPlatformFeePercent"
      | "setPointsPerBetUnit"
      | "totalFeesAccumulated"
      | "transferOwnership"
      | "unpause"
      | "validateAndCancelDuel"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArenaEligibleBet"
      | "BetPlaced"
      | "DuelCanceled"
      | "DuelCreated"
      | "DuelResolved"
      | "FeesWithdrawn"
      | "GainsClaimed"
      | "OwnershipTransferred"
      | "Paused"
      | "PointsEarned"
      | "RefundIssued"
      | "ResolutionProposed"
      | "ResolverAuthorized"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESOLUTION_TIMELOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeResolver",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedResolvers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bettingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bettingTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePotentialGains",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDuel",
    values: [string, string, boolean, [string, string, string], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "duels", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeResolution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fanToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fanTokenBalanceSnapshot",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fanTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fanTokenThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBettingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDuelInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFanToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutcomePot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBets",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDuelBalanced",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextDuelId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingResolutions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerBetUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeResolution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFanTokenThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPointsPerBetUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesAccumulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateAndCancelDuel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESOLUTION_TIMELOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedResolvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bettingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bettingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePotentialGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDuel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fanToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fanTokenBalanceSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fanTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fanTokenThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBettingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDuelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutcomePot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDuelBalanced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextDuelId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingResolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerBetUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFanTokenThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointsPerBetUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateAndCancelDuel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ArenaEligibleBetEvent {
  export type InputTuple = [user: AddressLike, duelId: BigNumberish];
  export type OutputTuple = [user: string, duelId: bigint];
  export interface OutputObject {
    user: string;
    duelId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    user: AddressLike,
    outcomeId: BigNumberish,
    amount: BigNumberish,
    fanTokenBalance: BigNumberish
  ];
  export type OutputTuple = [
    duelId: bigint,
    user: string,
    outcomeId: bigint,
    amount: bigint,
    fanTokenBalance: bigint
  ];
  export interface OutputObject {
    duelId: bigint;
    user: string;
    outcomeId: bigint;
    amount: bigint;
    fanTokenBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DuelCanceledEvent {
  export type InputTuple = [duelId: BigNumberish];
  export type OutputTuple = [duelId: bigint];
  export interface OutputObject {
    duelId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DuelCreatedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    title: string,
    category: string,
    arenaEligible: boolean,
    outcomes: [string, string, string],
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    duelId: bigint,
    title: string,
    category: string,
    arenaEligible: boolean,
    outcomes: [string, string, string],
    deadline: bigint
  ];
  export interface OutputObject {
    duelId: bigint;
    title: string;
    category: string;
    arenaEligible: boolean;
    outcomes: [string, string, string];
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DuelResolvedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    winningOutcomeId: BigNumberish
  ];
  export type OutputTuple = [duelId: bigint, winningOutcomeId: bigint];
  export interface OutputObject {
    duelId: bigint;
    winningOutcomeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GainsClaimedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    bonus: BigNumberish
  ];
  export type OutputTuple = [
    duelId: bigint,
    user: string,
    amount: bigint,
    bonus: bigint
  ];
  export interface OutputObject {
    duelId: bigint;
    user: string;
    amount: bigint;
    bonus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsEarnedEvent {
  export type InputTuple = [
    user: AddressLike,
    duelId: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [user: string, duelId: bigint, points: bigint];
  export interface OutputObject {
    user: string;
    duelId: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [duelId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    duelId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolutionProposedEvent {
  export type InputTuple = [
    duelId: BigNumberish,
    winningOutcomeId: BigNumberish,
    executeAt: BigNumberish
  ];
  export type OutputTuple = [
    duelId: bigint,
    winningOutcomeId: bigint,
    executeAt: bigint
  ];
  export interface OutputObject {
    duelId: bigint;
    winningOutcomeId: bigint;
    executeAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolverAuthorizedEvent {
  export type InputTuple = [resolver: AddressLike, authorized: boolean];
  export type OutputTuple = [resolver: string, authorized: boolean];
  export interface OutputObject {
    resolver: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleDuelSecure extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleDuelSecure;
  waitForDeployment(): Promise<this>;

  interface: SimpleDuelSecureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  RESOLUTION_TIMELOCK: TypedContractMethod<[], [bigint], "view">;

  authorizeResolver: TypedContractMethod<
    [_resolver: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  authorizedResolvers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bettingToken: TypedContractMethod<[], [string], "view">;

  bettingTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  calculatePotentialGains: TypedContractMethod<
    [_duelId: BigNumberish, _user: AddressLike],
    [[bigint, bigint] & { baseGains: bigint; bonusGains: bigint }],
    "view"
  >;

  claimGains: TypedContractMethod<
    [_duelId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRefund: TypedContractMethod<
    [_duelId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createDuel: TypedContractMethod<
    [
      _title: string,
      _category: string,
      _arenaEligible: boolean,
      _outcomes: [string, string, string],
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  duels: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        category: string;
        arenaEligible: boolean;
        deadline: bigint;
        isResolved: boolean;
        isCanceled: boolean;
        winningOutcomeId: bigint;
        potTotal: bigint;
        feesCollected: bigint;
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeResolution: TypedContractMethod<
    [_duelId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fanToken: TypedContractMethod<[], [string], "view">;

  fanTokenBalanceSnapshot: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  fanTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  fanTokenThreshold: TypedContractMethod<[], [bigint], "view">;

  getBettingToken: TypedContractMethod<[], [string], "view">;

  getDuelInfo: TypedContractMethod<
    [_duelId: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        [string, string, string],
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        title: string;
        category: string;
        arenaEligible: boolean;
        outcomes: [string, string, string];
        potTotal: bigint;
        deadline: bigint;
        isResolved: boolean;
        isCanceled: boolean;
        winningOutcomeId: bigint;
      }
    ],
    "view"
  >;

  getFanToken: TypedContractMethod<[], [string], "view">;

  getOutcomePot: TypedContractMethod<
    [_duelId: BigNumberish, _outcomeId: BigNumberish],
    [bigint],
    "view"
  >;

  getPlatformFeePercent: TypedContractMethod<[], [bigint], "view">;

  getUserBets: TypedContractMethod<
    [_duelId: BigNumberish, _user: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  isDuelBalanced: TypedContractMethod<
    [_duelId: BigNumberish],
    [boolean],
    "view"
  >;

  nextDuelId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingResolutions: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  placeBet: TypedContractMethod<
    [_duelId: BigNumberish, _outcomeId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  pointsPerBetUnit: TypedContractMethod<[], [bigint], "view">;

  proposeResolution: TypedContractMethod<
    [_duelId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFanTokenThreshold: TypedContractMethod<
    [_newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFeePercent: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPointsPerBetUnit: TypedContractMethod<
    [_newPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalFeesAccumulated: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  validateAndCancelDuel: TypedContractMethod<
    [_duelId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESOLUTION_TIMELOCK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizeResolver"
  ): TypedContractMethod<
    [_resolver: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedResolvers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bettingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bettingTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePotentialGains"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _user: AddressLike],
    [[bigint, bigint] & { baseGains: bigint; bonusGains: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimGains"
  ): TypedContractMethod<[_duelId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[_duelId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDuel"
  ): TypedContractMethod<
    [
      _title: string,
      _category: string,
      _arenaEligible: boolean,
      _outcomes: [string, string, string],
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "duels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        title: string;
        category: string;
        arenaEligible: boolean;
        deadline: bigint;
        isResolved: boolean;
        isCanceled: boolean;
        winningOutcomeId: bigint;
        potTotal: bigint;
        feesCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeResolution"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fanTokenBalanceSnapshot"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fanTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fanTokenThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBettingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDuelInfo"
  ): TypedContractMethod<
    [_duelId: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        [string, string, string],
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        title: string;
        category: string;
        arenaEligible: boolean;
        outcomes: [string, string, string];
        potTotal: bigint;
        deadline: bigint;
        isResolved: boolean;
        isCanceled: boolean;
        winningOutcomeId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOutcomePot"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _outcomeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlatformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBets"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _user: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDuelBalanced"
  ): TypedContractMethod<[_duelId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextDuelId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingResolutions"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _outcomeId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerBetUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeResolution"
  ): TypedContractMethod<
    [_duelId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFanTokenThreshold"
  ): TypedContractMethod<[_newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeePercent"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPointsPerBetUnit"
  ): TypedContractMethod<[_newPoints: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalFeesAccumulated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateAndCancelDuel"
  ): TypedContractMethod<[_duelId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ArenaEligibleBet"
  ): TypedContractEvent<
    ArenaEligibleBetEvent.InputTuple,
    ArenaEligibleBetEvent.OutputTuple,
    ArenaEligibleBetEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "DuelCanceled"
  ): TypedContractEvent<
    DuelCanceledEvent.InputTuple,
    DuelCanceledEvent.OutputTuple,
    DuelCanceledEvent.OutputObject
  >;
  getEvent(
    key: "DuelCreated"
  ): TypedContractEvent<
    DuelCreatedEvent.InputTuple,
    DuelCreatedEvent.OutputTuple,
    DuelCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DuelResolved"
  ): TypedContractEvent<
    DuelResolvedEvent.InputTuple,
    DuelResolvedEvent.OutputTuple,
    DuelResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "GainsClaimed"
  ): TypedContractEvent<
    GainsClaimedEvent.InputTuple,
    GainsClaimedEvent.OutputTuple,
    GainsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PointsEarned"
  ): TypedContractEvent<
    PointsEarnedEvent.InputTuple,
    PointsEarnedEvent.OutputTuple,
    PointsEarnedEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;
  getEvent(
    key: "ResolutionProposed"
  ): TypedContractEvent<
    ResolutionProposedEvent.InputTuple,
    ResolutionProposedEvent.OutputTuple,
    ResolutionProposedEvent.OutputObject
  >;
  getEvent(
    key: "ResolverAuthorized"
  ): TypedContractEvent<
    ResolverAuthorizedEvent.InputTuple,
    ResolverAuthorizedEvent.OutputTuple,
    ResolverAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ArenaEligibleBet(address,uint256)": TypedContractEvent<
      ArenaEligibleBetEvent.InputTuple,
      ArenaEligibleBetEvent.OutputTuple,
      ArenaEligibleBetEvent.OutputObject
    >;
    ArenaEligibleBet: TypedContractEvent<
      ArenaEligibleBetEvent.InputTuple,
      ArenaEligibleBetEvent.OutputTuple,
      ArenaEligibleBetEvent.OutputObject
    >;

    "BetPlaced(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "DuelCanceled(uint256)": TypedContractEvent<
      DuelCanceledEvent.InputTuple,
      DuelCanceledEvent.OutputTuple,
      DuelCanceledEvent.OutputObject
    >;
    DuelCanceled: TypedContractEvent<
      DuelCanceledEvent.InputTuple,
      DuelCanceledEvent.OutputTuple,
      DuelCanceledEvent.OutputObject
    >;

    "DuelCreated(uint256,string,string,bool,string[3],uint256)": TypedContractEvent<
      DuelCreatedEvent.InputTuple,
      DuelCreatedEvent.OutputTuple,
      DuelCreatedEvent.OutputObject
    >;
    DuelCreated: TypedContractEvent<
      DuelCreatedEvent.InputTuple,
      DuelCreatedEvent.OutputTuple,
      DuelCreatedEvent.OutputObject
    >;

    "DuelResolved(uint256,uint256)": TypedContractEvent<
      DuelResolvedEvent.InputTuple,
      DuelResolvedEvent.OutputTuple,
      DuelResolvedEvent.OutputObject
    >;
    DuelResolved: TypedContractEvent<
      DuelResolvedEvent.InputTuple,
      DuelResolvedEvent.OutputTuple,
      DuelResolvedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "GainsClaimed(uint256,address,uint256,uint256)": TypedContractEvent<
      GainsClaimedEvent.InputTuple,
      GainsClaimedEvent.OutputTuple,
      GainsClaimedEvent.OutputObject
    >;
    GainsClaimed: TypedContractEvent<
      GainsClaimedEvent.InputTuple,
      GainsClaimedEvent.OutputTuple,
      GainsClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PointsEarned(address,uint256,uint256)": TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
    PointsEarned: TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;

    "RefundIssued(uint256,address,uint256)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;

    "ResolutionProposed(uint256,uint256,uint256)": TypedContractEvent<
      ResolutionProposedEvent.InputTuple,
      ResolutionProposedEvent.OutputTuple,
      ResolutionProposedEvent.OutputObject
    >;
    ResolutionProposed: TypedContractEvent<
      ResolutionProposedEvent.InputTuple,
      ResolutionProposedEvent.OutputTuple,
      ResolutionProposedEvent.OutputObject
    >;

    "ResolverAuthorized(address,bool)": TypedContractEvent<
      ResolverAuthorizedEvent.InputTuple,
      ResolverAuthorizedEvent.OutputTuple,
      ResolverAuthorizedEvent.OutputObject
    >;
    ResolverAuthorized: TypedContractEvent<
      ResolverAuthorizedEvent.InputTuple,
      ResolverAuthorizedEvent.OutputTuple,
      ResolverAuthorizedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
