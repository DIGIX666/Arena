/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BetFiArenaV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "arenas"
      | "betsPerOutcome"
      | "bettingToken"
      | "claimGains"
      | "createArena"
      | "fanTokenForBonus"
      | "nextArenaId"
      | "outcomePots"
      | "owner"
      | "placeBet"
      | "platformFeePercent"
      | "renounceOwnership"
      | "resolveArena"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArenaCreated"
      | "ArenaResolved"
      | "BetPlaced"
      | "GainsClaimed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "arenas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betsPerOutcome",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bettingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createArena",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fanTokenForBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextArenaId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outcomePots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "arenas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "betsPerOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bettingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fanTokenForBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextArenaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outcomePots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ArenaCreatedEvent {
  export type InputTuple = [
    arenaId: BigNumberish,
    title: string,
    outcomeNames: string[]
  ];
  export type OutputTuple = [
    arenaId: bigint,
    title: string,
    outcomeNames: string[]
  ];
  export interface OutputObject {
    arenaId: bigint;
    title: string;
    outcomeNames: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArenaResolvedEvent {
  export type InputTuple = [
    arenaId: BigNumberish,
    winningOutcomeId: BigNumberish
  ];
  export type OutputTuple = [arenaId: bigint, winningOutcomeId: bigint];
  export interface OutputObject {
    arenaId: bigint;
    winningOutcomeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    arenaId: BigNumberish,
    user: AddressLike,
    outcomeId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    arenaId: bigint,
    user: string,
    outcomeId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    arenaId: bigint;
    user: string;
    outcomeId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GainsClaimedEvent {
  export type InputTuple = [
    arenaId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [arenaId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    arenaId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BetFiArenaV2 extends BaseContract {
  connect(runner?: ContractRunner | null): BetFiArenaV2;
  waitForDeployment(): Promise<this>;

  interface: BetFiArenaV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arenas: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        title: string;
        potTotal: bigint;
        deadline: bigint;
        isResolved: boolean;
        winningOutcomeId: bigint;
      }
    ],
    "view"
  >;

  betsPerOutcome: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;

  bettingToken: TypedContractMethod<[], [string], "view">;

  claimGains: TypedContractMethod<
    [_arenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createArena: TypedContractMethod<
    [_title: string, _outcomeNames: string[], _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  fanTokenForBonus: TypedContractMethod<[], [string], "view">;

  nextArenaId: TypedContractMethod<[], [bigint], "view">;

  outcomePots: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<
    [_arenaId: BigNumberish, _outcomeId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveArena: TypedContractMethod<
    [_arenaId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arenas"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        title: string;
        potTotal: bigint;
        deadline: bigint;
        isResolved: boolean;
        winningOutcomeId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "betsPerOutcome"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bettingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimGains"
  ): TypedContractMethod<[_arenaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createArena"
  ): TypedContractMethod<
    [_title: string, _outcomeNames: string[], _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fanTokenForBonus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextArenaId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "outcomePots"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [_arenaId: BigNumberish, _outcomeId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveArena"
  ): TypedContractMethod<
    [_arenaId: BigNumberish, _winningOutcomeId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArenaCreated"
  ): TypedContractEvent<
    ArenaCreatedEvent.InputTuple,
    ArenaCreatedEvent.OutputTuple,
    ArenaCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ArenaResolved"
  ): TypedContractEvent<
    ArenaResolvedEvent.InputTuple,
    ArenaResolvedEvent.OutputTuple,
    ArenaResolvedEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "GainsClaimed"
  ): TypedContractEvent<
    GainsClaimedEvent.InputTuple,
    GainsClaimedEvent.OutputTuple,
    GainsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ArenaCreated(uint256,string,string[])": TypedContractEvent<
      ArenaCreatedEvent.InputTuple,
      ArenaCreatedEvent.OutputTuple,
      ArenaCreatedEvent.OutputObject
    >;
    ArenaCreated: TypedContractEvent<
      ArenaCreatedEvent.InputTuple,
      ArenaCreatedEvent.OutputTuple,
      ArenaCreatedEvent.OutputObject
    >;

    "ArenaResolved(uint256,uint256)": TypedContractEvent<
      ArenaResolvedEvent.InputTuple,
      ArenaResolvedEvent.OutputTuple,
      ArenaResolvedEvent.OutputObject
    >;
    ArenaResolved: TypedContractEvent<
      ArenaResolvedEvent.InputTuple,
      ArenaResolvedEvent.OutputTuple,
      ArenaResolvedEvent.OutputObject
    >;

    "BetPlaced(uint256,address,uint256,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "GainsClaimed(uint256,address,uint256)": TypedContractEvent<
      GainsClaimedEvent.InputTuple,
      GainsClaimedEvent.OutputTuple,
      GainsClaimedEvent.OutputObject
    >;
    GainsClaimed: TypedContractEvent<
      GainsClaimedEvent.InputTuple,
      GainsClaimedEvent.OutputTuple,
      GainsClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
